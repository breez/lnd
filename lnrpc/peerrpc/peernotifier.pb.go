// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peerrpc/peernotifier.proto

package peerrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PeerSubscription struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerSubscription) Reset()         { *m = PeerSubscription{} }
func (m *PeerSubscription) String() string { return proto.CompactTextString(m) }
func (*PeerSubscription) ProtoMessage()    {}
func (*PeerSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8a6661814dbff2, []int{0}
}

func (m *PeerSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerSubscription.Unmarshal(m, b)
}
func (m *PeerSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerSubscription.Marshal(b, m, deterministic)
}
func (m *PeerSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSubscription.Merge(m, src)
}
func (m *PeerSubscription) XXX_Size() int {
	return xxx_messageInfo_PeerSubscription.Size(m)
}
func (m *PeerSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSubscription proto.InternalMessageInfo

type PeerNotification struct {
	/// The identity pubkey of the peer
	PubKey string `protobuf:"bytes,1,opt,name=pub_key,proto3" json:"pub_key,omitempty"`
	/// Network address of the peer; eg `127.0.0.1:10011`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	/// The flag reflects if this is a connected or disconnected notification
	Connected            bool     `protobuf:"varint,3,opt,name=connected,proto3" json:"connected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerNotification) Reset()         { *m = PeerNotification{} }
func (m *PeerNotification) String() string { return proto.CompactTextString(m) }
func (*PeerNotification) ProtoMessage()    {}
func (*PeerNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8a6661814dbff2, []int{1}
}

func (m *PeerNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerNotification.Unmarshal(m, b)
}
func (m *PeerNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerNotification.Marshal(b, m, deterministic)
}
func (m *PeerNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerNotification.Merge(m, src)
}
func (m *PeerNotification) XXX_Size() int {
	return xxx_messageInfo_PeerNotification.Size(m)
}
func (m *PeerNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerNotification.DiscardUnknown(m)
}

var xxx_messageInfo_PeerNotification proto.InternalMessageInfo

func (m *PeerNotification) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PeerNotification) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerNotification) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func init() {
	proto.RegisterType((*PeerSubscription)(nil), "peerrpc.PeerSubscription")
	proto.RegisterType((*PeerNotification)(nil), "peerrpc.PeerNotification")
}

func init() { proto.RegisterFile("peerrpc/peernotifier.proto", fileDescriptor_9d8a6661814dbff2) }

var fileDescriptor_9d8a6661814dbff2 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x48, 0x4d, 0x2d,
	0x2a, 0x2a, 0x48, 0xd6, 0x07, 0xd1, 0x79, 0xf9, 0x25, 0x99, 0x69, 0x99, 0xa9, 0x45, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0x39, 0x25, 0x21, 0x2e, 0x81, 0x80, 0xd4, 0xd4, 0xa2,
	0xe0, 0xd2, 0xa4, 0xe2, 0xe4, 0xa2, 0xcc, 0x82, 0x92, 0xcc, 0xfc, 0x3c, 0xa5, 0x14, 0x88, 0x98,
	0x1f, 0x58, 0x4b, 0x72, 0x22, 0x48, 0x4c, 0x48, 0x82, 0x8b, 0xbd, 0xa0, 0x34, 0x29, 0x3e, 0x3b,
	0xb5, 0x52, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x05, 0xc9, 0x24, 0xa6, 0xa4, 0x14,
	0xa5, 0x16, 0x17, 0x4b, 0x30, 0x41, 0x64, 0xa0, 0x5c, 0x21, 0x19, 0x2e, 0xce, 0xe4, 0xfc, 0xbc,
	0xbc, 0xd4, 0xe4, 0x92, 0xd4, 0x14, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x84, 0x80, 0x51,
	0x04, 0x17, 0x0f, 0xc2, 0x96, 0xd4, 0x22, 0x21, 0x0f, 0x2e, 0x3e, 0xa8, 0x2b, 0x92, 0x52, 0x41,
	0x12, 0xc5, 0x42, 0x92, 0x7a, 0x50, 0x57, 0xea, 0xa1, 0x3b, 0x51, 0x0a, 0x55, 0x0a, 0xd9, 0xa5,
	0x06, 0x8c, 0x49, 0x6c, 0x60, 0x3f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x04, 0xc1,
	0x28, 0x01, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerNotifierClient is the client API for PeerNotifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerNotifierClient interface {
	SubscribePeers(ctx context.Context, in *PeerSubscription, opts ...grpc.CallOption) (PeerNotifier_SubscribePeersClient, error)
}

type peerNotifierClient struct {
	cc *grpc.ClientConn
}

func NewPeerNotifierClient(cc *grpc.ClientConn) PeerNotifierClient {
	return &peerNotifierClient{cc}
}

func (c *peerNotifierClient) SubscribePeers(ctx context.Context, in *PeerSubscription, opts ...grpc.CallOption) (PeerNotifier_SubscribePeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerNotifier_serviceDesc.Streams[0], "/peerrpc.PeerNotifier/SubscribePeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerNotifierSubscribePeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerNotifier_SubscribePeersClient interface {
	Recv() (*PeerNotification, error)
	grpc.ClientStream
}

type peerNotifierSubscribePeersClient struct {
	grpc.ClientStream
}

func (x *peerNotifierSubscribePeersClient) Recv() (*PeerNotification, error) {
	m := new(PeerNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerNotifierServer is the server API for PeerNotifier service.
type PeerNotifierServer interface {
	SubscribePeers(*PeerSubscription, PeerNotifier_SubscribePeersServer) error
}

func RegisterPeerNotifierServer(s *grpc.Server, srv PeerNotifierServer) {
	s.RegisterService(&_PeerNotifier_serviceDesc, srv)
}

func _PeerNotifier_SubscribePeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerNotifierServer).SubscribePeers(m, &peerNotifierSubscribePeersServer{stream})
}

type PeerNotifier_SubscribePeersServer interface {
	Send(*PeerNotification) error
	grpc.ServerStream
}

type peerNotifierSubscribePeersServer struct {
	grpc.ServerStream
}

func (x *peerNotifierSubscribePeersServer) Send(m *PeerNotification) error {
	return x.ServerStream.SendMsg(m)
}

var _PeerNotifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peerrpc.PeerNotifier",
	HandlerType: (*PeerNotifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePeers",
			Handler:       _PeerNotifier_SubscribePeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peerrpc/peernotifier.proto",
}
